---
apiVersion: v1
kind: Namespace
metadata:
  name: production

---
apiVersion: v1
kind: Secret
metadata:
  name: dogbank-postgres-secret
  namespace: production
type: Opaque
data:
  POSTGRES_USER: ZG9nYmFuaw==
  POSTGRES_PASSWORD: ZG9nMTIzNA==
  POSTGRES_DB: ZG9nYmFuaw==

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
  namespace: production
data:
  01-init.sql: |
    CREATE TABLE IF NOT EXISTS usuarios (
        id SERIAL PRIMARY KEY,
        cpf VARCHAR(14) UNIQUE NOT NULL,
        senha VARCHAR(255) NOT NULL,
        nome VARCHAR(100) NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        chave_pix VARCHAR(100),
        criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    CREATE TABLE IF NOT EXISTS contas (
        id SERIAL PRIMARY KEY,
        usuario_id INTEGER REFERENCES usuarios(id),
        numero_conta VARCHAR(20) UNIQUE NOT NULL,
        saldo DECIMAL(10,2) DEFAULT 0.00,
        banco VARCHAR(50) DEFAULT 'DogBank',
        user_name VARCHAR(100),
        criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    CREATE TABLE IF NOT EXISTS transacoes_pix (
        id SERIAL PRIMARY KEY,
        conta_origem INTEGER REFERENCES contas(id),
        conta_destino INTEGER REFERENCES contas(id),
        valor_transacionado DECIMAL(10,2) NOT NULL,
        chave_pix_destino VARCHAR(100),
        data_transacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        status VARCHAR(20) DEFAULT 'CONCLUIDA'
    );
    INSERT INTO usuarios (cpf, senha, nome, email, chave_pix) VALUES
    ('12345678915','123456','yuki itadori','yuki.itadori@email.com','yuki.pix@email.com'),
    ('98765432101','123456','Pedro Silva','pedro.silva@email.com','pedro.pix@email.com'),
    ('45678912302','123456','João Santos','joao.santos@email.com','joao.pix@email.com'),
    ('78912345603','123456','Emiliano Costa','emiliano.costa@email.com','emiliano.pix@email.com'),
    ('32165498704','123456','Eliane Oliveira','eliane.oliveira@email.com','eliane.pix@email.com'),
    ('65498732105','123456','Patrícia Souza','patricia.souza@email.com','patricia.pix@email.com'),
    ('15975385206','123456','Renato Almeida','renato.almeida@email.com','renato.pix@email.com'),
    ('66666666666','123456','Usuário Teste','teste@email.com','teste.pix@email.com')
    ON CONFLICT (cpf) DO NOTHING;
    INSERT INTO contas (usuario_id, numero_conta, saldo, user_name)
    SELECT u.id, 'DB' || LPAD(u.id::TEXT, 8, '0'), 10000.00, u.nome
    FROM usuarios u
    WHERE NOT EXISTS (SELECT 1 FROM contas c WHERE c.usuario_id = u.id);

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        admission.datadoghq.com/enabled: "false"
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        envFrom:
        - secretRef:
            name: dogbank-postgres-secret
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-storage
        emptyDir: {}
      - name: init-script
        configMap:
          name: postgres-init-script

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: production
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432

---
# AUTH - porta 8088
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth
  namespace: production
  labels:
    app: auth
    tier: backend
    tags.datadoghq.com/env: production
    tags.datadoghq.com/service: auth
    tags.datadoghq.com/version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth
  template:
    metadata:
      labels:
        app: auth
        tier: backend
        tags.datadoghq.com/env: production
        tags.datadoghq.com/service: auth
        tags.datadoghq.com/version: v1
        admission.datadoghq.com/enabled: "true"
      annotations:
        ad.datadoghq.com/auth.logs: '[{"source":"java","service":"auth"}]'
    spec:
      containers:
      - name: auth
        image: schawirin/dogbank-auth-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8088
        env:
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres:5432/dogbank"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: dogbank-postgres-secret
              key: POSTGRES_USER
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dogbank-postgres-secret
              key: POSTGRES_PASSWORD
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8088
          initialDelaySeconds: 90
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8088
          initialDelaySeconds: 60
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: production
spec:
  selector:
    app: auth
  ports:
  - name: http
    port: 8088
    targetPort: 8088

---
# ACCOUNTS - porta 8089
apiVersion: apps/v1
kind: Deployment
metadata:
  name: accounts
  namespace: production
  labels:
    app: accounts
    tier: backend
    tags.datadoghq.com/env: production
    tags.datadoghq.com/service: accounts
    tags.datadoghq.com/version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: accounts
  template:
    metadata:
      labels:
        app: accounts
        tier: backend
        tags.datadoghq.com/env: production
        tags.datadoghq.com/service: accounts
        tags.datadoghq.com/version: v1
        admission.datadoghq.com/enabled: "true"
      annotations:
        ad.datadoghq.com/accounts.logs: '[{"source":"java","service":"accounts"}]'
    spec:
      containers:
      - name: accounts
        image: schawirin/dogbank-account-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8089
        env:
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres:5432/dogbank"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: dogbank-postgres-secret
              key: POSTGRES_USER
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dogbank-postgres-secret
              key: POSTGRES_PASSWORD
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8089
          initialDelaySeconds: 90
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8089
          initialDelaySeconds: 60
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: accounts-service
  namespace: production
spec:
  selector:
    app: accounts
  ports:
  - name: http
    port: 8089
    targetPort: 8089

---
# BANCOCENTRAL - porta 8085
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bancocentral
  namespace: production
  labels:
    app: bancocentral
    tier: backend
    tags.datadoghq.com/env: production
    tags.datadoghq.com/service: bancocentral
    tags.datadoghq.com/version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bancocentral
  template:
    metadata:
      labels:
        app: bancocentral
        tier: backend
        tags.datadoghq.com/env: production
        tags.datadoghq.com/service: bancocentral
        tags.datadoghq.com/version: v1
        admission.datadoghq.com/enabled: "true"
      annotations:
        ad.datadoghq.com/bancocentral.logs: '[{"source":"java","service":"bancocentral"}]'
    spec:
      containers:
      - name: bancocentral
        image: schawirin/dogbank-bancocentral-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8085
        env:
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres:5432/dogbank"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: dogbank-postgres-secret
              key: POSTGRES_USER
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dogbank-postgres-secret
              key: POSTGRES_PASSWORD
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8085
          initialDelaySeconds: 90
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8085
          initialDelaySeconds: 60
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: bancocentral-service
  namespace: production
spec:
  selector:
    app: bancocentral
  ports:
  - name: http
    port: 8085
    targetPort: 8085

---
# TRANSACTIONS - porta 8084
apiVersion: apps/v1
kind: Deployment
metadata:
  name: transactions
  namespace: production
  labels:
    app: transactions
    tier: backend
    tags.datadoghq.com/env: production
    tags.datadoghq.com/service: transactions
    tags.datadoghq.com/version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: transactions
  template:
    metadata:
      labels:
        app: transactions
        tier: backend
        tags.datadoghq.com/env: production
        tags.datadoghq.com/service: transactions
        tags.datadoghq.com/version: v1
        admission.datadoghq.com/enabled: "true"
      annotations:
        ad.datadoghq.com/transactions.logs: '[{"source":"java","service":"transactions"}]'
    spec:
      containers:
      - name: transactions
        image: schawirin/dogbank-transaction-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8084
        env:
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres:5432/dogbank"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: dogbank-postgres-secret
              key: POSTGRES_USER
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dogbank-postgres-secret
              key: POSTGRES_PASSWORD
        - name: ACCOUNT_SERVICE_URL
          value: "http://accounts-service:8089"
        - name: AUTH_SERVICE_URL
        # - name: BANCOCENTRAL_API_URL
        #   value: "http://bancocentral-service:8085"          value: "http://auth-service:8088"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8084
          initialDelaySeconds: 90
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8084
          initialDelaySeconds: 60
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: transactions-service
  namespace: production
spec:
  selector:
    app: transactions
  ports:
  - name: http
    port: 8084
    targetPort: 8084

---
# INTEGRATION - porta 8082
apiVersion: apps/v1
kind: Deployment
metadata:
  name: integration
  namespace: production
  labels:
    app: integration
    tier: backend
    tags.datadoghq.com/env: production
    tags.datadoghq.com/service: integration
    tags.datadoghq.com/version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: integration
  template:
    metadata:
      labels:
        app: integration
        tier: backend
        tags.datadoghq.com/env: production
        tags.datadoghq.com/service: integration
        tags.datadoghq.com/version: v1
        admission.datadoghq.com/enabled: "true"
      annotations:
        ad.datadoghq.com/integration.logs: '[{"source":"java","service":"integration"}]'
    spec:
      containers:
      - name: integration
        image: schawirin/dogbank-integration-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8082
        env:
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres:5432/dogbank"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: dogbank-postgres-secret
              key: POSTGRES_USER
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dogbank-postgres-secret
              key: POSTGRES_PASSWORD
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8082
          initialDelaySeconds: 90
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8082
          initialDelaySeconds: 60
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: integration-service
  namespace: production
spec:
  selector:
    app: integration
  ports:
  - name: http
    port: 8082
    targetPort: 8082

---
# NOTIFICATIONS - porta 8083
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notifications
  namespace: production
  labels:
    app: notifications
    tier: backend
    tags.datadoghq.com/env: production
    tags.datadoghq.com/service: notifications
    tags.datadoghq.com/version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notifications
  template:
    metadata:
      labels:
        app: notifications
        tier: backend
        tags.datadoghq.com/env: production
        tags.datadoghq.com/service: notifications
        tags.datadoghq.com/version: v1
        admission.datadoghq.com/enabled: "true"
      annotations:
        ad.datadoghq.com/notifications.logs: '[{"source":"java","service":"notifications"}]'
    spec:
      containers:
      - name: notifications
        image: schawirin/dogbank-notification-service:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8083
        env:
        - name: DD_LOGS_INJECTION
          value: "true"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres:5432/dogbank"
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: dogbank-postgres-secret
              key: POSTGRES_USER
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dogbank-postgres-secret
              key: POSTGRES_PASSWORD
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8083
          initialDelaySeconds: 90
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8083
          initialDelaySeconds: 60
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
apiVersion: v1
kind: Service
metadata:
  name: notifications-service
  namespace: production
spec:
  selector:
    app: notifications
  ports:
  - name: http
    port: 8083
    targetPort: 8083