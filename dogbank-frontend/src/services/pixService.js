// src/services/pixService.js
import { transactionApi, bancoCentralApi } from './api';
import authService from './authService';

/**
 * Servi√ßo central com todas as opera√ß√µes relacionadas a PIX
 */
const pixService = {
  /**
   * Valida chave PIX junto ao Banco Central
   * @param {string} pixKey
   * @param {number} amount
   * @returns {Promise<{status: string, error?: string}>}
   */
  async validatePixKey(pixKey, amount) {
    try {
      console.log('üîç Validando chave PIX:', { pixKey, amount });
      console.log('üîç bancoCentralApi baseURL:', bancoCentralApi.defaults.baseURL);
      
      const { data } = await bancoCentralApi.post(
        '/pix/validate',
        { pixKey, amount }
      );
      
      console.log('‚úÖ Chave PIX validada:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erro ao validar chave PIX:', error.response?.data || error.message || error);
      throw error;
    }
  },

  /**
   * Executa a transfer√™ncia PIX: autentica senha, valida chave e dispara a transa√ß√£o
   * @param {{ pixKey: string, amount: number, description?: string, password: string, sourceAccountId: number }}
   * @returns {Promise<Object>} recibo completo
   */
  async executePix({ pixKey, amount, description = '', password, sourceAccountId }) {
    console.log('üîÑ Iniciando execu√ß√£o PIX:', { pixKey, amount, description, sourceAccountId });
    
    if (!pixKey) {
      throw new Error('Chave PIX n√£o informada');
    }
    if (!password) {
      throw new Error('Senha banc√°ria n√£o informada');
    }

    // 1) Autentica usu√°rio com senha
    const cpf = authService.getCpf();
    if (!cpf) {
      throw new Error('CPF n√£o encontrado na sess√£o');
    }
    
    console.log('üîê Autenticando usu√°rio:', cpf);
    await authService.login(cpf, password);

    // 2) Valida√ß√£o da chave junto ao Banco Central
    console.log('üîç Validando chave PIX no Banco Central...');
    const validation = await this.validatePixKey(pixKey, amount);
    if (validation.status !== 'APPROVED') {
      throw new Error(validation.error || 'Chave PIX n√£o aprovada pelo Banco Central');
    }

    // 3) Envio para o servi√ßo de transa√ß√µes
    const payload = {
      accountOriginId: sourceAccountId,
      pixKeyDestination: pixKey,
      amount,
      description
    };

    try {
      // DEBUG: Verificar URL completa
      const fullUrl = transactionApi.defaults.baseURL + '/pix';
      console.log('üîç URL completa do PIX:', fullUrl);
      console.log('üîç BaseURL do transactionApi:', transactionApi.defaults.baseURL);
      console.log('üîç Payload do PIX:', payload);
      
      const { data } = await transactionApi.post('/pix', payload);
      
      console.log('‚úÖ PIX executado com sucesso:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erro detalhado PIX:', {
        message: error.message,
        url: error.config?.url,
        baseURL: error.config?.baseURL,
        fullURL: `${error.config?.baseURL || ''}${error.config?.url || ''}`,
        status: error.response?.status,
        responseData: error.response?.data
      });
      throw error;
    }
  },

  /**
   * Retorna hist√≥rico de transa√ß√µes de uma conta
   * @param {number} accountId
   * @returns {Promise<Array>} lista de transa√ß√µes
   */
  async getTransactionHistory(accountId) {
    try {
      // DEBUG: Verificar URL completa
      const fullUrl = transactionApi.defaults.baseURL + `/account/${accountId}`;
      console.log('üîç URL completa da requisi√ß√£o de hist√≥rico:', fullUrl);
      console.log('üîç BaseURL do transactionApi:', transactionApi.defaults.baseURL);
      console.log('üîç URL atual da p√°gina:', window.location.href);
      console.log('üîç AccountId:', accountId);
      
      const { data } = await transactionApi.get(`/account/${accountId}`);
      
      console.log('‚úÖ Hist√≥rico de transa√ß√µes obtido:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erro detalhado ao buscar hist√≥rico:', {
        message: error.message,
        url: error.config?.url,
        baseURL: error.config?.baseURL,
        fullURL: `${error.config?.baseURL || ''}${error.config?.url || ''}`,
        status: error.response?.status,
        responseData: error.response?.data
      });
      throw error;
    }
  }
};

// DEBUG: Verificar se o servi√ßo foi carregado
console.log('üì¶ pixService carregado com sucesso');

export default pixService;