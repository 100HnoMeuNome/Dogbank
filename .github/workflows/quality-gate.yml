name: quality-gate
on: [pull_request]
permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  gate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Instala o setup de Test Visibility/Optimization (Java + JS)
      - name: Configure Datadog Test Optimization
        uses: datadog/test-visibility-github-action@v2
        with:
          languages: "java js"
          api_key: ${{ secrets.DD_API_KEY }}
          site: ${{ secrets.DD_SITE }}

      # ===== Backend Java (JUnit + JaCoCo) =====
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Build & Test backend (JaCoCo)
        working-directory: ./dogbank
        run: mvn -B -q test jacoco:report
        env:
          DD_ENV: ci
          DD_SERVICE: dogbank-backend

      # ===== Frontend (Jest + coverage) =====
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Test frontend with coverage (se existir)
        working-directory: ./dogbank-frontend
        run: |
          if [ -f package.json ]; then
            if [ -f package-lock.json ]; then npm ci; else npm install; fi
            npm test -- --coverage || true
          fi
        env:
          # necessário p/ instrumentar Jest (limitação do GitHub Actions)
          NODE_OPTIONS: -r ${{ env.DD_TRACE_PACKAGE }}
          DD_ENV: ci
          DD_SERVICE: dogbank-frontend

      # ===== Cobertura -> Datadog =====
      - name: Upload Java coverage (JaCoCo XML)
        run: npx -y @datadog/datadog-ci@latest coverage upload --format=jacoco ./dogbank/target/site/jacoco/jacoco.xml
        env:
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_SITE: ${{ secrets.DD_SITE }}

      - name: Upload Frontend coverage (LCOV) se existir
        run: |
          if [ -f ./dogbank-frontend/coverage/lcov.info ]; then
            npx -y @datadog/datadog-ci@latest coverage upload --format=lcov ./dogbank-frontend/coverage/lcov.info
          fi
        env:
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_SITE: ${{ secrets.DD_SITE }}

      # ===== Quality Gate =====
      - name: Evaluate Datadog Quality Gates
        run: npx -y @datadog/datadog-ci@latest gate evaluate --timeout 120 --fail-on-empty
        env:
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_APP_KEY: ${{ secrets.DD_APP_KEY }}
          DD_SITE: ${{ secrets.DD_SITE }}

     ## flaky Demo 
     
      - name: Configure Datadog Test Optimization
        uses: datadog/test-visibility-github-action@v2
        with:
          languages: "java js"
          api_key: ${{ secrets.DD_API_KEY }}
          site: ${{ secrets.DD_SITE }}
       
      - name: Build & Test backend (JaCoCo)
        working-directory: ./dogbank
        run: mvn -B -q test jacoco:report
        env:
          DD_ENV: ci
          DD_SERVICE: dogbank-backend
          DEMO_FLAKY: "1"    # <- LIGA o flaky só quando quiser demo
        
         